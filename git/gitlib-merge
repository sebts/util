#!/bin/bash
source gitlib

b=		# source branch names
r=		# source remote name
u=		# source repo url
d=		# destination branch names
e=		# destination remote name
o=		# destination repo url
t=		# working tree

usage()
{
cat << EOF

usage: $0 $*
This script will merge branches within or across repositories.

OPTIONS:    
  Fork mode: 
    given a source remote and destination remote, 
    will fast-forward the entire fork repository.
  git-merge.sh -t <path> -r <remote> [[-u <url>]] -e <remote> [[-o <url>]]
  
  Merge mode: 
    given a source branch and destination branch, 
    will merge one branch to another.  
  git-merge.sh -t <path> -b <branch> [[-r <remote>]] [[-u <url>]] 
               -d <branch> [[-e <remote>]] [[-o <url>]] 
  
  -b Sets the source branch name. Accepts a space delimited list.
  -r Sets the source remote name.
  -u Sets the source repository url.
  -d Sets the destination branch name. Accepts a space delimited list.
  -e Sets the destination remote name.  
  -o Sets the destination repository url.
  -t Sets the work tree.
  -? Show this message
EOF
}

# begin arguments
while getopts "b:r:u:d:e:o:t:?" OPTION
do
	case $OPTION in
		b) b=$OPTARG ;;
		r) r=$OPTARG ;;
		u) u=$OPTARG ;;
		d) d=$OPTARG ;;
		e) e=$OPTARG ;;
		o) o=$OPTARG ;;
		t) t=$OPTARG ;;
		?) usage ; exit 0;;
	 esac
done

if [[ -z $t ]] || (([[ -z $b ]] || [[ -z $d ]]) && (([[ -z $r ]] || [[ -z $e ]]) && ([[ -z $u ]] || [[ -z $o ]])))
then
	usage ; exit 1	
fi
if [[ -z $e ]]
then 
	e="origin"
fi
if [[ -z $r ]]
then
	if [[ $u != $o ]]
	then r="upstream"
	else r="origin"
	fi
fi
# end arguments

calldir="$PWD"

init-repository "$t" "$r $u" "$e $o"

merge-branches $r "$b" $e "$d"

cd "$calldir"