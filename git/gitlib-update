#!/bin/bash
source gitlib

t=            #git working tree. also the production directory
d=            #git repository directory.
u=            #repository url
r=origin      #remote name
b=            #branch name 

usage()
{
cat << EOF

usage: $0 $*
This script will update a working tree, e.g, production, to a given branch

OPTIONS:
  
  gitlib-update -t <path> -d <path> -b <branch> [-u <url>] [-r <remote>]

  -t Sets the work tree, e.g., production directory
  -d Sets the git directory
  -b Sets the branch name.
  -u Optional. Sets the repository url.
  -r Optional. Sets the remote name. Default: origin.
EOF
}

# begin arguments
while getopts "t:d:u:r:b:?" OPTION
do
    case $OPTION in
        t) t=$OPTARG ;;
        d) d=$OPTARG ;;
        u) u=$OPTARG ;;
        r) r=$OPTARG ;;
        b) b=$OPTARG ;;
        ?) usage ; exit ;;
     esac
done

if [[ -z $t ]] || [[ -z $d ]] || [[ -z $r ]] || [[ -z $b ]]
then
    usage ; exit 1;
fi
# end arguments

# $1. work-tree to use
update()
{
    init-repository "$1" "$d"
    init-remote $r $u
    clean-checkout $r $b true
}

if  [[ ! -d $d ]] || [[ ! $(ls -A $d) ]]
then #git dir dne or empty. Initialize directory with git.
	echo "# Initializing into backup directory"
	update "${t}~"
	
	echo "# Change worktree to ${t}"
	git submodule foreach '
		w=$(git config core.worktree)
		git config core.worktree ${w%~\/$path}/$path # remove the ~ from the submodule worktree
	'
	git config core.worktree ${t}
	
	cd "$t"
    echo "# Copy ${t}~ on top of ${t}"
    cp --backup=none --remove-destination --recursive --target-directory=${t} ${t}~/*
	
    echo "# Removing backup directory"
    rm -r ${t}~
fi

update "${t}"
